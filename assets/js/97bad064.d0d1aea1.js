"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[5886],{1262:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var a,r=n(7462),o=n(3366),i=(n(7294),n(3905)),s=["components"],l={title:"Requests"},d="JSON Request",p={unversionedId:"request",id:"request",title:"Requests",description:"There are several options for json body deserialization.",source:"@site/docs/request.md",sourceDirName:".",slug:"/request",permalink:"/actix-website/docs/request",draft:!1,editUrl:"https://github.com/actix/actix-website/docs/request.md",tags:[],version:"current",frontMatter:{title:"Requests"},sidebar:"docs",previous:{title:"URL Dispatch",permalink:"/actix-website/docs/url-dispatch"},next:{title:"Responses",permalink:"/actix-website/docs/response"}},u={},c=[{value:"Content Encoding",id:"content-encoding",level:2},{value:"Chunked transfer encoding",id:"chunked-transfer-encoding",level:2},{value:"Multipart body",id:"multipart-body",level:2},{value:"Urlencoded body",id:"urlencoded-body",level:2},{value:"Streaming request",id:"streaming-request",level:2}],m=(a="CodeBlock",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),k={toc:c};function h(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"json-request"},"JSON Request"),(0,i.kt)("p",null,"There are several options for json body deserialization."),(0,i.kt)("p",null,"The first option is to use ",(0,i.kt)("em",{parentName:"p"},"Json")," extractor. First, you define a handler function that accepts ",(0,i.kt)("inlineCode",{parentName:"p"},"Json<T>")," as a parameter, then, you use the ",(0,i.kt)("inlineCode",{parentName:"p"},".to()")," method for registering this handler. It is also possible to accept arbitrary valid json object by using ",(0,i.kt)("inlineCode",{parentName:"p"},"serde_json::Value")," as a type ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),"."),(0,i.kt)("p",null,"First example of json of ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON Request")," depends on ",(0,i.kt)("inlineCode",{parentName:"p"},"serde"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nserde = { version = "1.0", features = ["derive"] }\n')),(0,i.kt)("p",null,"Second example of ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON Request")," depends on ",(0,i.kt)("inlineCode",{parentName:"p"},"serde")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"serde_json")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"futures"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nserde = { version = "1.0", features = ["derive"] }\nserde_json = "1"\nfutures = "0.3"\n')),(0,i.kt)("p",null,"If you want to add default value for a field, refer to ",(0,i.kt)("inlineCode",{parentName:"p"},"serde"),"'s ",(0,i.kt)("a",{parentName:"p",href:"https://serde.rs/attr-default.html"},"documentation"),"."),(0,i.kt)(m,{example:"requests",file:"main.rs",section:"json-request",mdxType:"CodeBlock"}),(0,i.kt)("p",null,"You may also manually load the payload into memory and then deserialize it."),(0,i.kt)("p",null,"In the following example, we will deserialize a ",(0,i.kt)("em",{parentName:"p"},"MyObj")," struct. We need to load the request body first and then deserialize the json into an object."),(0,i.kt)(m,{example:"requests",file:"manual.rs",section:"json-manual",mdxType:"CodeBlock"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A complete example for both options is available in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/actix/examples/tree/master/json/json"},"examples directory"),".")),(0,i.kt)("h2",{id:"content-encoding"},"Content Encoding"),(0,i.kt)("p",null,"Actix Web automatically ",(0,i.kt)("em",{parentName:"p"},"decompresses")," payloads. The following codecs are supported:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Brotli"),(0,i.kt)("li",{parentName:"ul"},"Gzip"),(0,i.kt)("li",{parentName:"ul"},"Deflate"),(0,i.kt)("li",{parentName:"ul"},"Zstd")),(0,i.kt)("p",null,"If request headers contain a ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-Encoding")," header, the request payload is decompressed according to the header value. Multiple codecs are not supported, i.e: ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-Encoding: br, gzip"),"."),(0,i.kt)("h2",{id:"chunked-transfer-encoding"},"Chunked transfer encoding"),(0,i.kt)("p",null,"Actix automatically decodes ",(0,i.kt)("em",{parentName:"p"},"chunked")," encoding. The ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/web/struct.Payload.html"},(0,i.kt)("inlineCode",{parentName:"a"},"web::Payload"))," extractor already contains the decoded byte stream. If the request payload is compressed with one of the supported compression codecs (br, gzip, deflate), then the byte stream is decompressed."),(0,i.kt)("h2",{id:"multipart-body"},"Multipart body"),(0,i.kt)("p",null,"Actix Web provides multipart stream support with an external crate, ",(0,i.kt)("a",{parentName:"p",href:"https://crates.io/crates/actix-multipart"},(0,i.kt)("inlineCode",{parentName:"a"},"actix-multipart")),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A full example is available in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/actix/examples/tree/master/forms/multipart"},"examples directory"),".")),(0,i.kt)("h2",{id:"urlencoded-body"},"Urlencoded body"),(0,i.kt)("p",null,"Actix Web provides support for ",(0,i.kt)("em",{parentName:"p"},"application/x-www-form-urlencoded")," encoded bodies with the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/web/struct.Form.html"},(0,i.kt)("inlineCode",{parentName:"a"},"web::Form"))," extractor which resolves to the deserialized instance. The type of the instance must implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"Deserialize")," trait from ",(0,i.kt)("em",{parentName:"p"},"serde"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"UrlEncoded")," future can resolve into an error in several cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"content type is not ",(0,i.kt)("inlineCode",{parentName:"li"},"application/x-www-form-urlencoded")),(0,i.kt)("li",{parentName:"ul"},"transfer encoding is ",(0,i.kt)("inlineCode",{parentName:"li"},"chunked"),"."),(0,i.kt)("li",{parentName:"ul"},"content-length is greater than 256k"),(0,i.kt)("li",{parentName:"ul"},"payload terminates with error.")),(0,i.kt)(m,{example:"requests",file:"urlencoded.rs",section:"urlencoded",mdxType:"CodeBlock"}),(0,i.kt)("h2",{id:"streaming-request"},"Streaming request"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"HttpRequest")," is a stream of ",(0,i.kt)("inlineCode",{parentName:"p"},"Bytes")," objects. It can be used to read the request body payload."),(0,i.kt)("p",null,"In the following example, we read and print the request payload chunk by chunk:"),(0,i.kt)(m,{example:"requests",file:"streaming.rs",section:"streaming",mdxType:"CodeBlock"}))}h.isMDXComponent=!0}}]);