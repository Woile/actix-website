"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[4224],{4740:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return m}});var n=r(7462),a=r(3366),s=(r(7294),r(3905)),o=r(2536),i=["components"],p={title:"Handlers"},l="Request Handlers",c={unversionedId:"handlers",id:"handlers",title:"Handlers",description:"A request handler is an async function that accepts zero or more parameters that can be extracted from a request (i.e., impl FromRequest) and returns a type that can be converted into an HttpResponse (i.e., impl Responder).",source:"@site/docs/handlers.md",sourceDirName:".",slug:"/handlers",permalink:"/actix-website/docs/handlers",draft:!1,editUrl:"https://github.com/actix/actix-website/docs/handlers.md",tags:[],version:"current",frontMatter:{title:"Handlers"},sidebar:"docs",previous:{title:"Extractors",permalink:"/actix-website/docs/extractors"},next:{title:"Errors",permalink:"/actix-website/docs/errors"}},d={},m=[{value:"Response with custom type",id:"response-with-custom-type",level:2},{value:"Streaming response body",id:"streaming-response-body",level:2},{value:"Different return types (Either)",id:"different-return-types-either",level:2}],u={toc:m};function h(e){var t=e.components,r=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"request-handlers"},"Request Handlers"),(0,s.kt)("p",null,"A request handler is an async function that accepts zero or more parameters that can be extracted from a request (i.e., ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/trait.FromRequest.html"},(0,s.kt)("em",{parentName:"a"},"impl FromRequest")),") and returns a type that can be converted into an HttpResponse (i.e., ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/trait.Responder.html"},(0,s.kt)("em",{parentName:"a"},"impl Responder")),")."),(0,s.kt)("p",null,"Request handling happens in two stages. First the handler object is called, returning any object that implements the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/trait.Responder.html"},(0,s.kt)("em",{parentName:"a"},"Responder"))," trait. Then, ",(0,s.kt)("inlineCode",{parentName:"p"},"respond_to()")," is called on the returned object, converting itself to a ",(0,s.kt)("inlineCode",{parentName:"p"},"HttpResponse")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"Error"),"."),(0,s.kt)("p",null,"By default actix-web provides ",(0,s.kt)("inlineCode",{parentName:"p"},"Responder")," implementations for some standard types, such as ",(0,s.kt)("inlineCode",{parentName:"p"},"&'static str"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"String"),", etc."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"For a complete list of implementations, check the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/trait.Responder.html#foreign-impls"},(0,s.kt)("em",{parentName:"a"},"Responder documentation")),".")),(0,s.kt)("p",null,"Examples of valid handlers:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'async fn index(_req: HttpRequest) -> &\'static str {\n    "Hello world!"\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'async fn index(_req: HttpRequest) -> String {\n    "Hello world!".to_owned()\n}\n')),(0,s.kt)("p",null,"You can also change the signature to return ",(0,s.kt)("inlineCode",{parentName:"p"},"impl Responder")," which works well if more complex types are involved."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'async fn index(_req: HttpRequest) -> impl Responder {\n    web::Bytes::from_static(b"Hello world!")\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"async fn index(req: HttpRequest) -> Box<Future<Item=HttpResponse, Error=Error>> {\n    ...\n}\n")),(0,s.kt)("h2",{id:"response-with-custom-type"},"Response with custom type"),(0,s.kt)("p",null,"To return a custom type directly from a handler function, the type needs to implement the ",(0,s.kt)("inlineCode",{parentName:"p"},"Responder")," trait."),(0,s.kt)("p",null,"Let's create a response for a custom type that serializes to an ",(0,s.kt)("inlineCode",{parentName:"p"},"application/json")," response:"),(0,s.kt)(o.Z,{example:"responder-trait",file:"main.rs",section:"responder-trait",mdxType:"CodeBlock"}),(0,s.kt)("h2",{id:"streaming-response-body"},"Streaming response body"),(0,s.kt)("p",null,"Response body can be generated asynchronously. In this case, body must implement the stream trait ",(0,s.kt)("inlineCode",{parentName:"p"},"Stream<Item=Bytes, Error=Error>"),", i.e.:"),(0,s.kt)(o.Z,{example:"async-handlers",file:"stream.rs",section:"stream",mdxType:"CodeBlock"}),(0,s.kt)("h2",{id:"different-return-types-either"},"Different return types (Either)"),(0,s.kt)("p",null,"Sometimes, you need to return different types of responses. For example, you can error check and return errors, return async responses, or any result that requires two different types."),(0,s.kt)("p",null,"For this case, the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/enum.Either.html"},"Either")," type can be used. ",(0,s.kt)("inlineCode",{parentName:"p"},"Either")," allows combining two different responder types into a single type."),(0,s.kt)(o.Z,{example:"either",file:"main.rs",section:"either",mdxType:"CodeBlock"}))}h.isMDXComponent=!0}}]);