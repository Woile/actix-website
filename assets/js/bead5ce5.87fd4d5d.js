"use strict";(self.webpackChunkactix_website=self.webpackChunkactix_website||[]).push([[3230],{8981:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var i=a(7462),n=a(3366),p=(a(7294),a(3905)),o=a(2536),r=["components"],s={title:"Application"},l="Writing an Application",c={unversionedId:"application",id:"application",title:"Application",description:"actix-web provides various primitives to build web servers and applications with Rust. It provides routing, middleware, pre-processing of requests, post-processing of responses, etc.",source:"@site/docs/application.md",sourceDirName:".",slug:"/application",permalink:"/actix-website/docs/application",draft:!1,editUrl:"https://github.com/actix/actix-website/edit/master/docs/application.md",tags:[],version:"current",frontMatter:{title:"Application"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/actix-website/docs/getting-started"},next:{title:"Server",permalink:"/actix-website/docs/server"}},d={},u=[{value:"State",id:"state",level:2},{value:"Shared Mutable State",id:"shared-mutable-state",level:2},{value:"Using an Application Scope to Compose Applications",id:"using-an-application-scope-to-compose-applications",level:2},{value:"Application guards and virtual hosting",id:"application-guards-and-virtual-hosting",level:2},{value:"Configure",id:"configure",level:2}],h={toc:u};function m(e){var t=e.components,a=(0,n.Z)(e,r);return(0,p.kt)("wrapper",(0,i.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"writing-an-application"},"Writing an Application"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"actix-web")," provides various primitives to build web servers and applications with Rust. It provides routing, middleware, pre-processing of requests, post-processing of responses, etc."),(0,p.kt)("p",null,"All ",(0,p.kt)("inlineCode",{parentName:"p"},"actix-web")," servers are built around the ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/struct.App.html"},(0,p.kt)("inlineCode",{parentName:"a"},"App"))," instance. It is used for registering routes for resources and middleware. It also stores application state shared across all handlers within the same scope."),(0,p.kt)("p",null,"An application's ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/struct.Scope.html"},(0,p.kt)("inlineCode",{parentName:"a"},"scope")),' acts as a namespace for all routes, i.e. all routes for a specific application scope have the same url path prefix. The application prefix always contains a leading "/" slash. If a supplied prefix does not contain leading slash, it is automatically inserted. The prefix should consist of value path segments.'),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"For an application with scope ",(0,p.kt)("inlineCode",{parentName:"p"},"/app"),", any request with the paths ",(0,p.kt)("inlineCode",{parentName:"p"},"/app"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"/app/"),", or ",(0,p.kt)("inlineCode",{parentName:"p"},"/app/test")," would match; however, the path ",(0,p.kt)("inlineCode",{parentName:"p"},"/application")," would not match.")),(0,p.kt)(o.Z,{example:"application",file:"app.rs",section:"setup",mdxType:"CodeBlock"}),(0,p.kt)("p",null,"In this example, an application with the ",(0,p.kt)("inlineCode",{parentName:"p"},"/app")," prefix and an ",(0,p.kt)("inlineCode",{parentName:"p"},"index.html")," resource is created. This resource is available through the ",(0,p.kt)("inlineCode",{parentName:"p"},"/app/index.html")," url."),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"For more information, check the ",(0,p.kt)("a",{parentName:"p",href:"/docs/url-dispatch/index.html#using-an-application-prefix-to-compose-applications"},"URL Dispatch")," section.")),(0,p.kt)("h2",{id:"state"},"State"),(0,p.kt)("p",null,"Application state is shared with all routes and resources within the same scope. State can be accessed with the ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/web/struct.Data.html"},(0,p.kt)("inlineCode",{parentName:"a"},"web::Data<T>"))," extractor where ",(0,p.kt)("inlineCode",{parentName:"p"},"T")," is the type of the state. State is also accessible for middleware."),(0,p.kt)("p",null,"Let's write a simple application and store the application name in the state:"),(0,p.kt)(o.Z,{example:"application",file:"state.rs",section:"setup",mdxType:"CodeBlock"}),(0,p.kt)("p",null,"Next, pass in the state when initializing the App and start the application:"),(0,p.kt)(o.Z,{example:"application",file:"state.rs",section:"start_app",mdxType:"CodeBlock"}),(0,p.kt)("p",null,"Any number of state types could be registered within the application."),(0,p.kt)("h2",{id:"shared-mutable-state"},"Shared Mutable State"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"HttpServer")," accepts an application factory rather than an application instance. An ",(0,p.kt)("inlineCode",{parentName:"p"},"HttpServer")," constructs an application instance for each thread. Therefore, application data must be constructed multiple times. If you want to share data between different threads, a shareable object should be used, e.g. ",(0,p.kt)("inlineCode",{parentName:"p"},"Send")," + ",(0,p.kt)("inlineCode",{parentName:"p"},"Sync"),"."),(0,p.kt)("p",null,"Internally, ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/web/struct.Data.html"},(0,p.kt)("inlineCode",{parentName:"a"},"web::Data"))," uses ",(0,p.kt)("inlineCode",{parentName:"p"},"Arc"),". So in order to avoid creating two ",(0,p.kt)("inlineCode",{parentName:"p"},"Arc"),"s, we should create our Data before registering it using ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/struct.App.html#method.app_data"},(0,p.kt)("inlineCode",{parentName:"a"},"App::app_data()")),"."),(0,p.kt)("p",null,"In the following example, we will write an application with mutable, shared state. First, we define our state and create our handler:"),(0,p.kt)(o.Z,{example:"application",file:"mutable_state.rs",section:"setup_mutable",mdxType:"CodeBlock"}),(0,p.kt)("p",null,"and register the data in an ",(0,p.kt)("inlineCode",{parentName:"p"},"App"),":"),(0,p.kt)(o.Z,{example:"application",file:"mutable_state.rs",section:"make_app_mutable",mdxType:"CodeBlock"}),(0,p.kt)("p",null,"Key takeaways:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"State initialized ",(0,p.kt)("em",{parentName:"li"},"inside")," the closure passed to ",(0,p.kt)("inlineCode",{parentName:"li"},"HttpServer::new")," is local to the worker thread and may become de-synced if modified."),(0,p.kt)("li",{parentName:"ul"},"To achieve ",(0,p.kt)("em",{parentName:"li"},"globally shared state"),", it must be created ",(0,p.kt)("strong",{parentName:"li"},"outside")," of the closure passed to ",(0,p.kt)("inlineCode",{parentName:"li"},"HttpServer::new")," and moved/cloned in.")),(0,p.kt)("h2",{id:"using-an-application-scope-to-compose-applications"},"Using an Application Scope to Compose Applications"),(0,p.kt)("p",null,"The ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/web/fn.scope.html"},(0,p.kt)("inlineCode",{parentName:"a"},"web::scope()"))," method allows setting a resource group prefix. This scope represents a resource prefix that will be prepended to all resource patterns added by the resource configuration. This can be used to help mount a set of routes at a different location than the original author intended while still maintaining the same resource names."),(0,p.kt)("p",null,"For example:"),(0,p.kt)(o.Z,{example:"application",file:"scope.rs",section:"scope",mdxType:"CodeBlock"}),(0,p.kt)("p",null,"In the above example, the ",(0,p.kt)("inlineCode",{parentName:"p"},"show_users")," route will have an effective route pattern of ",(0,p.kt)("inlineCode",{parentName:"p"},"/users/show")," instead of ",(0,p.kt)("inlineCode",{parentName:"p"},"/show")," because the application's scope argument will be prepended to the pattern. The route will then only match if the URL path is ",(0,p.kt)("inlineCode",{parentName:"p"},"/users/show"),", and when the ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/struct.HttpRequest.html#method.url_for"},(0,p.kt)("inlineCode",{parentName:"a"},"HttpRequest.url_for()"))," function is called with the route name ",(0,p.kt)("inlineCode",{parentName:"p"},"show_users"),", it will generate a URL with that same path."),(0,p.kt)("h2",{id:"application-guards-and-virtual-hosting"},"Application guards and virtual hosting"),(0,p.kt)("p",null,"You can think of a guard as a simple function that accepts a ",(0,p.kt)("em",{parentName:"p"},"request")," object reference and returns ",(0,p.kt)("em",{parentName:"p"},"true")," or ",(0,p.kt)("em",{parentName:"p"},"false"),". Formally, a guard is any object that implements the ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/guard/trait.Guard.html"},(0,p.kt)("inlineCode",{parentName:"a"},"Guard"))," trait. Actix Web provides several guards. You can check the ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/guard/index.html#functions"},"functions section")," of the API docs."),(0,p.kt)("p",null,"One of the provided guards is ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/guard/fn.Header.html"},(0,p.kt)("inlineCode",{parentName:"a"},"Header")),". It can be used as a filter based on request header information."),(0,p.kt)(o.Z,{example:"application",file:"vh.rs",section:"vh",mdxType:"CodeBlock"}),(0,p.kt)("h2",{id:"configure"},"Configure"),(0,p.kt)("p",null,"For simplicity and reusability both ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/struct.App.html#method.configure"},(0,p.kt)("inlineCode",{parentName:"a"},"App"))," and ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/struct.Scope.html#method.configure"},(0,p.kt)("inlineCode",{parentName:"a"},"web::Scope"))," provide the ",(0,p.kt)("inlineCode",{parentName:"p"},"configure")," method. This function is useful for moving parts of the configuration to a different module or even library. For example, some of the resource's configuration could be moved to a different module."),(0,p.kt)(o.Z,{example:"application",file:"config.rs",section:"config",mdxType:"CodeBlock"}),(0,p.kt)("p",null,"The result of the above example would be:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'/         -> "/"\n/app      -> "app"\n/api/test -> "test"\n')),(0,p.kt)("p",null,"Each ",(0,p.kt)("a",{parentName:"p",href:"https://docs.rs/actix-web/4/actix_web/web/struct.ServiceConfig.html"},(0,p.kt)("inlineCode",{parentName:"a"},"ServiceConfig"))," can have its own ",(0,p.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"routes"),", and ",(0,p.kt)("inlineCode",{parentName:"p"},"services"),"."))}m.isMDXComponent=!0}}]);